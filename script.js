const body = document.querySelector("body");
const form = document.querySelector("form");

form.addEventListener("submit", (event) => {
  event.preventDefault();

  const inputTable = document.querySelector("#inputTable");
  const outputTable = document.querySelector("#outputTable");
  const showTotalUnit = document.querySelector("#totalUnits");

  // Clearing inner HTML generated by last input.
  inputTable.innerHTML = "";
  outputTable.innerHTML = "";
  showTotalUnit.innerText = "";

  // Reading input value and converting to array of number
  const waterTankBlocks = document
    .querySelector("#waterTankBlocks")
    .value.split(",")
    .map((element) => +element);

  // Identifying the numbers of rows and columns to have in table based on input.
  const rowCount = Math.max(...waterTankBlocks);
  const colCount = waterTankBlocks.length;
  console.log(waterTankBlocks);

  // Creating the input and output tables.
  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {
    const inputTableRow = inputTable.insertRow(rowIndex);
    const outputTableRow = outputTable.insertRow(rowIndex);
    for (let colIndex = 0; colIndex < colCount; colIndex++) {
      inputTableRow.insertCell(colIndex);
      outputTableRow.insertCell(colIndex);

      // inputTableCol.textContent = rowIndex + "," + colIndex;
      // outputTableCol.textContent = rowIndex + "," + colIndex;
    }
  }

  // Filling the input table with input values for visualization in yellow color.
  for (let index = 0; index < waterTankBlocks.length; index++) {
    for (
      let row = rowCount - 1;
      row >= rowCount - waterTankBlocks[index];
      row--
    ) {
      inputTable.rows[row].cells[index].style.backgroundColor = "yellow";
    }
  }

  // Calculating the total numbers of unit can be filled with which unit to be filled.
  let blockFound = false;
  let block1;
  let block1Index;
  let block2;
  let gapCount = 0;
  let totalUnit = 0;
  const blockToFilled = [];

  for (const [index, num] of waterTankBlocks.entries()) {
    if (!blockFound && num > 0) {
      blockFound = true;
      block1 = num;
      block1Index = index;
    } else if (blockFound && num > 0) {
      block2 = num;
      totalUnit += Math.min(block1, block2) * gapCount;

      if (index - block1Index > 1) {
        blockToFilled.push({
          startColIndex: block1Index + 1,
          endColIndex: index,
          numOfCellToFill: Math.min(block1, block2),
        });
      }

      block1 = num;
      block1Index = index;
      gapCount = 0;
    } else if (num == 0 && blockFound) {
      gapCount++;
    }
  }

  // Filling the output table with blue color.
  for (const fillDetail of blockToFilled) {
    const { startColIndex, endColIndex, numOfCellToFill } = fillDetail;

    for (let col = startColIndex; col < endColIndex; col++) {
      for (let row = rowCount - 1; row >= rowCount - numOfCellToFill; row--) {
        outputTable.rows[row].cells[col].style.backgroundColor = "blue";
      }
    }
  }

  // Putting result
  showTotalUnit.innerText = totalUnit + " units";
  outputTable.parentElement.insertBefore(showTotalUnit, outputTable);
});
